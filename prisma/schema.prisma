// To learn more about the Prisma schema file, visit https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Contact {
    email          String
    listId         String
    list           List      @relation(fields: [listId], references: [id])
    createdAt      DateTime  @default(now())
    confirmedAt    DateTime?
    unsubscribedAt DateTime?

    @@id([email, listId])
}

model List {
    id                      String    @id @default(uuid())
    name                    String    @unique
    from                    String
    confirmationTemplateId  String
    signupRedirectUrl       String
    confirmationRedirectUrl String
    unsubscribeRedirectUrl  String
    contacts                Contact[]
    createdAt               DateTime  @default(now())
}

model Newsletter {
    id               String    @id @default(uuid())
    listIdToInclude  String
    listIdsToExclude String
    from             String
    templateId       String
    toSendAfter      DateTime
    isSending        Boolean   @default(false)
    sentAt           DateTime?
    sendings         Sending[]
    createdAt        DateTime  @default(now())
}

model Sending {
    email        String
    newsletterId String
    newsletter   Newsletter @relation(fields: [newsletterId], references: [id])
    sentAt       DateTime?
    createdAt    DateTime   @default(now())

    @@id([email, newsletterId])
}

model Template {
    id        String   @id @default(uuid())
    subject   String
    html      String
    text      String
    createdAt DateTime @default(now())
}

// Following schemas are necessary for Next auth
// https://authjs.dev/reference/adapter/prisma#schema

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    isAdmin       Boolean?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
